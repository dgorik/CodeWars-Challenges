/**
 * Function to count the number of distinct elements in each contiguous subarray of length k.
 * @param {number[]} arr - The input array of numbers.
 * @param {number} k - The length of each subarray (window).
 * @returns {number[]} - An array containing the count of distinct elements for each window.
 */
function countContiguousDistinct(arr, k) {
  // Array to store the results
  let answer = [];

  // Map to store the frequency of elements in the current window
  let freqMap = new Map();

  // Variable to keep track of the number of distinct elements in the current window
  let distinctCount = 0;

  // Index variable for iteration
  let i = 0;

  /**
   * Function to add an element to the frequency map and update the distinct count.
   * @param {number} element - The element to be added.
   */
  var addElement = (element) => {
    freqMap.set(element, (freqMap.get(element) || 0) + 1);
    // If the element is added for the first time, increment the distinct count
    if (freqMap.get(element) === 1) {
      distinctCount++;
    }
  };

  /**
   * Function to remove an element from the frequency map and update the distinct count.
   * @param {number} element - The element to be removed.
   */
  var removeElement = (element) => {
    if (freqMap.get(element) === 1) {
      freqMap.delete(element);
      distinctCount--;
    } else {
      freqMap.set(element, freqMap.get(element) - 1);
    }
  };

  // Process the first window of size k
  while (i < k) {
    addElement(arr[i]);
    i++;
  }
  // Add the distinct count of the first window to the answer array
  answer.push(distinctCount);

  // Slide the window across the array
  while (i < arr.length) {
    // Remove the element that is leaving the window
    removeElement(arr[i - k]);
    // Add the element that is entering the window
    addElement(arr[i]);
    // Add the current distinct count to the answer array
    answer.push(distinctCount);
    i++;
  }

  // Return the array containing the counts of distinct elements for each window
  return answer;
}

// Example usage
let x = countContiguousDistinct([1, 2, 1, 3, 4, 2, 3], 4);

console.log(x); // Expected output: [3, 4, 4, 3]

// The function splits the original array into k consecutive windows and adds the count of unique values
// of each window to the answer array.
