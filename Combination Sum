var combinationSum = function(candidates, target) {
    const result = [];

    // Helper function to find combinations
    const findCombinations = (start, target, path) => {
        if (target === 0) {
            result.push([...path]);
            return;
        } //if target is zero that means that the current path forms a valid combination that sums to the original target.
        if (target < 0) {
            return;
        } //If the target is less than 0, it means the current path's sum exceeds the target. The function returns immediately without doing anything, stopping further exploration of this path.
        for (let i = start; i < candidates.length; i++) {
            path.push(candidates[i]);
            findCombinations(i, target - candidates[i], path);
            path.pop();
        }
    };

    findCombinations(0, target, []);
    return result;
};

// Example usage:
const candidates = [2, 3, 6, 7];
const target = 7;
console.log(combinationSum(candidates, target));
// Output: [[2, 2, 3], [7]]
