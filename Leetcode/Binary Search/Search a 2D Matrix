
Description - You are given an m x n integer matrix matrix with the following two properties:

Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.

You must write a solution in O(log(m * n)) time complexity.

//Brute Force

var searchMatrix = function(matrix, target) {
    for(let i = 0; i < matrix.length; i++){
            for(let j = 0; j < matrix[i].length; j++){
                let element = matrix[i][j]
                if(element === target){
                    return true
                }
                if(element > target){
                    break
                }
            }
    }
    return false
}


//Binary Search

var searchMatrix = function(matrix, target) {
    const rows = matrix.length
    const columns = matrix[0].length

    let top = 0
    let bottom = rows - 1

    while(top <= bottom){
        let middle = Math.floor((top + bottom) / 2)
        if(target > matrix[middle][columns - 1]){
            top = middle + 1
        }
        else if(target < matrix[middle][0]){
            bottom = middle - 1
        }
        else{
            break
        }
    }

    if (!(top <= bottom)) {
        return false;
    }

    let row = Math.floor((top + bottom) / 2);
    let l = 0;
    let r = columns - 1;

    while(l <= r){
        const m = Math.floor((l + r) / 2);
        if (target > matrix[row][m]) {
            l = m + 1;
        } 
        else if (target < matrix[row][m]) {
            r = m - 1;
        } 
        else {
            return true;
        }
    }
        return false;
}
