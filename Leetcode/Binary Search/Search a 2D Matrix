
Description - You are given an m x n integer matrix matrix with the following two properties:

Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.

You must write a solution in O(log(m * n)) time complexity.

//Brute Force

var searchMatrix = function(matrix, target) {
    for(let i = 0; i < matrix.length; i++){
            for(let j = 0; j < matrix[i].length; j++){
                let element = matrix[i][j]
                if(element === target){
                    return true
                }
                if(element > target){
                    break
                }
            }
    }
    return false
}


//Binary Search

var searchMatrix = function(matrix, target) {
    let left = 0
    let rows = matrix.length
    let columns  = matrix[0].length
    let right = rows * columns - 1

    while( left <= right){
        let mid = Math.floor((right + left) / 2)
        let row = Math.floor(mid/columns)
        let column = mid % columns

        if(matrix[row][column] > target){
            right = mid - 1
        }

        else if(matrix[row][column] < target){
            left = mid + 1
        }

        else{
            return true
        }
    }

    return false
};
