/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[][]}
 */
var levelOrder = function(root) {
    if(!root) return []
    let result = []
    let queue = []
    queue.push(root)

    while(queue.length >= 1){
        let length = queue.length
        let level = []

        for(let i = 0; i < length; i++){
            let node = queue.shift()
            level.push(node.val)
            if(node.left) queue.push(node.left)
            if(node.right) queue.push(node.right)
        }
        if(level.length >= 1) result.push(level)
    }

    return result
};

//The general idea here is to use a queue to keep track of all the nodes. We push the root node onto the stack and then keep iteriating until the queue has a length of 0. 
//In the while loop, we pop the left most element from the stack and check if the popped node has left or right children (we then push those children onto the level). 
//We then push the level to the result array
