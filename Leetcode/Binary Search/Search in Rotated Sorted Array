/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number}
 */
var search = function(nums, target) {

    let l = 0
    let r = nums.length - 1

    while( l <= r){
        let mid = Math.floor((l + r) / 2)

        if(nums[mid] == target) return mid

        if(nums[l] <= nums[mid]){
            if(nums[l] <= target && target < nums[mid]){
                r = mid - 1
            }
            else{
                l = mid + 1
            }
        }
        else{
            if(nums[r] >= target && target > nums[mid]){
                l = mid + 1
            }
            else{
                r = mid - 1
            }
        }
    }

    return -1

};

//The idea here to split the array to understand which portion is sorted and which is not

//We then check - if the left portion is sorted (nums[l] < nums[mid]) and if the targer resides in that sorted portion (if(nums[l] <= target && target < nums[mid])), we move the righ pointer to r = mid - 1

//If the left half is not sorted, then the right portion must be sorted. If the element resides in the right sorted portion, we move left pointer to mid + 1. If the element is not in the right portion, then we move the right pointer to mid - 1
