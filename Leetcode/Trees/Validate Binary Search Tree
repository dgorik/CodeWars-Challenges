/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
var isValidBST = function(root) {
   function helper(node, min, max){
        if(!node) return true
        if(node.val >= max || node.val <= min){
            return false
        }
        let l = helper(node.left, min, node.val)
        let r = helper(node.right, node.val, max)
        return l && r
   }

   return helper(root, -Infinity, +Infinity)
};

//The general idea is to recursively traverse the tree and pass max and min allowed valued for each node



InOrder Traversal (since inOrder traversal always returns a sorted list for a BST)
/////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
var isValidBST = function(root) {
    let prev = -Infinity
   function inOrder(node){
        if(!node) return true
        if(!inOrder(node.left)) return false
        if(node.val <= prev){
            return false
        }
        prev = node.val
        if(!inOrder(node.right)) return false
        return true
   }

   return inOrder(root)
};

/// The general idea here is to leverage inOrder DFS. inOrder DFS returns a sorted list for a BST
/// The solution below is a variation of inOrder solution with prev element (solution below is using a for loop to check if an inOrder list is in ascending order)

/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
var isValidBST = function(root) {
   let list = []
   inOrder(root)
   for(let i = 0; i < list.length - 1; i++){
        if(list[i] >= list[i+1]){
            return false
        }
   }
   return true

   function inOrder(node){
        if(!node) return
        inOrder(node.left)
        list.push(node.val)
        inOrder(node.right)
   }
  
};
