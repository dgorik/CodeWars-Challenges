/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */

/**
 * Encodes a tree to a single string.
 *
 * @param {TreeNode} root
 * @return {string}
 */
var serialize = function(root) {
    let data = []
    function helper(root){
        if(!root){
            data.push("null")
            return
        }
        data.push(root.val)
        helper(root.left)
        helper(root.right)
    }
    helper(root)
    return data
};

/**
 * Decodes your encoded data to tree.
 *
 * @param {string} data
 * @return {TreeNode}
 */
var deserialize = function(data) {
    function helper(){
        if(data.length <= 0) return
        let val = data.shift()
        if(val == "null") return null
        let node = new TreeNode(parseInt(val))
        node.left = helper()
        node.right = helper()
        return node
    }
    return helper()
};

/**
 * Your functions will be called as such:
 * deserialize(serialize(root));
 */

// When you serialize a tree, you need to add all node values as values and "null" values for nodes that are null

// When you deserialize, you need create a new node for values and return "null" for null
