/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[]}
 */
var postorderTraversal = function(root) {

    let res = []

    function traverse(node){
        if(node == null) return
        traverse(node.left,res)
        traverse(node.right, res)
        res.push(node.val)
    }
    traverse(root)

    return res
};

PostOrder is when you traverse Left -> Right -> root. We can also solve it like this by passing result array in each function call

/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[]}
 */
var postorderTraversal = function(root) {

    function traverse(node, res){
        if(node == null) return
        traverse(node.left,res)
        traverse(node.right, res)
        res.push(node.val)
        return res
    }

    return traverse(root,[]) ? traverse(root,[]): []
}
