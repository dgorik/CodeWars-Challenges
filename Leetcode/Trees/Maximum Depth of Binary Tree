/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var maxDepth = function(root) {

    function maxDepth(node){
        if(!node) return 0
        let l = maxDepth(node.left)
        let r = maxDepth(node.right)
        return 1 + Math.max(l,r)
    }

    return maxDepth(root)
};

//The general idea is to traverse the left and rigth subtrees. At every node we find a max of left and right subtree and return the max of the two plus 1 (to account for the node itself).
