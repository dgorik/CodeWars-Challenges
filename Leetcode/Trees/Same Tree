/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} p
 * @param {TreeNode} q
 * @return {boolean}
 */
var isSameTree = function(p, q) {
    function helper(node1, node2){
        if(!node1 && !node2) return true
        if(!node1 || !node2 || node1.val != node2.val) return false
        return helper(node1.left, node2.left) &&  helper(node1.right, node2.right)
    }
    return helper(p,q)
};

//The general idea here is to traverse both trees. 
    //You first check whether you reach the end of the both trees. If you have then, you can return true
    //You then check if then compare if there is a case where one tree doesn't have a node while the other does or if nodes are not equal in value
    // You recursively check every left node on each tree and every right node on each tree
