/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @param {TreeNode} subRoot
 * @return {boolean}
 */
var isSubtree = function(root, subRoot) {

   function sameTree(root1, root2){
        if(!root1 && !root2) return true
        if(!root1 || !root2 || root1.val != root2.val){
            return false
        }
        let l = sameTree(root1.left, root2.left)
        let r = sameTree(root1.right, root2.right)
        return r && l
   }

   function hasSubtree(node1){
       if(!node1) return false
       if(node1.val == subRoot.val){
            if(sameTree(node1,subRoot)){
                return true
            }
       }
       return hasSubtree(node1.left) || hasSubtree(node1.right)
   }
   
   return hasSubtree(root)
};

//The general idea here is to traverse an original tree until you find a node that equals the subRoot
// You then recursively call sameTree to check the two subtree (with root at node and root at subRoot) are the same
// If there are the same, you return
// This example is using preorder tree traversal
