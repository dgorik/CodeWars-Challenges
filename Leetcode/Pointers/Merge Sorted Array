/**
 * @param {number[]} nums1
 * @param {number} m
 * @param {number[]} nums2
 * @param {number} n
 * @return {void} Do not return anything, modify nums1 in-place instead.
 */
var merge = function(nums1, m, nums2, n) {
    let i = m - 1;  // Pointer for nums1
    let j = n - 1;  // Pointer for nums2
    let k = m + n - 1;  // Pointer for the end of nums1

    while (k >= 0) {
        if( i < 0){
            nums1[k] = nums2[j]
            j--
        }
        else if(j < 0){
            break
        }
        else if (nums1[i] > nums2[j]){
            nums1[k] = nums1[i]
            i--
        }
        else{
            nums1[k] = nums2[j]
            j--
        }
        k--;
    }
};

//the general idea here is to create three pointers:
- i  points at the last valid element (before all zeros) of array nums1
- j points at the last element of array nums2
- k points at the last element of array nums1

We loop through array nums1 while k is greater or equal to zero decremeneting k by one after each iteration
-if nums[i] > nums[j], then nums[k] = nums[i]
-if j < 0, we can break out as the remaining elements are the elements of array nums1
-if i < 0, we set the beginning of the array with n remaining elements from array nums2
