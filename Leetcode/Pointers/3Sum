/**
 * @param {number[]} nums
 * @return {number[][]}
 */
var threeSum = function(nums) {
    nums.sort((a,b) => a - b)
    let answer = []

    for(let i = 0; i < nums.length && nums[i] <= 0; i++){
        if(i > 0 && nums[i] == nums[i-1]) continue
        let l = i + 1
        let r = nums.length - 1

        while(l < r){
            if(nums[i] + nums[l] + nums[r] < 0){
                l++
            }
            else if(nums[i] + nums[l] + nums[r] > 0){
                r--
            }
            else{
                answer.push([nums[i], nums[l], nums[r]])
                l++
                while(l < r && nums[l] === nums[l-1]){
                    l++
                }
            }
        }
    }
    return answer
};

//The general idea here is to sort an array and start looping through it with i. We fix i and create a while loop inside to use two pointers approach.
//We keep looking at the sum of nums[i]+nums[j]+nums[k]. If the sum is less than 0, we increment j by 1. If the sum is larger than 0, we decrement k by one
//When we get to 0 sum, we increment j by one. If nums[j] equals nums[j-1] we keep incrementing j in order to avoid duplicated solutions
