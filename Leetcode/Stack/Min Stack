 * @param {number} val
 * @return {void}
 */
MinStack.prototype.push = function(val) {
    this.stack.push(val)
    if(this.min_stack.length != 0){
        val = Math.min(val, this.min_stack[this.min_stack.length - 1] )
    }
    
    this.min_stack.push(val)
};

/**
 * @return {void}
 */
MinStack.prototype.pop = function() {
    this.min_stack.pop()
    this.stack.pop()
};

/**
 * @return {number}
 */
MinStack.prototype.top = function() {
    return this.stack[this.stack.length - 1]
};

/**
 * @return {number}
 */
MinStack.prototype.getMin = function() {
    return this.min_stack[this.min_stack.length - 1]
};
