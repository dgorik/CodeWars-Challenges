/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */

/**
 * @param {ListNode} head
 * @return {boolean}
 */
var hasCycle = function(head) {
    let seen = new Set()

    let node = head

    while(node){
        if(seen.has(node)){
            return true
        }
        seen.add(node)
        node = node.next
    }
    return false
};

//The idea here is to create a set and store every node we have visited. We then check if the node we are adding is already in the Set(), if it is - we return true

/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */

/**
 * @param {ListNode} head
 * @return {boolean}
 */
var hasCycle = function(head) {
    let slow = head
    let fast = head

    while(fast !== null && fast.next != null){
        slow = slow.next
        fast = fast.next.next
        if(fast == slow){
            return true
        }
    }
    return false
};

//The idea here is to create two pointers: one slow and one fast. The slow pointer moves one node at a time whereas the fast pointer moves two nodes at a time. If slow pointer meets the fast pointer, then there is a cycle
