Given an array of integers nums, sort the array in ascending order and return it.

You must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.

 
/**
 * @param {number[]} nums
 * @return {number[]}
 */
 function merge(arr1, arr2){
        var result = []
        var i = 0
        var j = 0

        while(i < arr1.length && j < arr2.length){
            if(arr2[j] > arr1[i]){
                result.push(arr1[i])
                i++
            }
            else{
                result.push(arr2[j])
                j++
            }
        }

        while( i < arr1.length){
             result.push(arr1[i])
             i++
        }

        while( j < arr2.length){
             result.push(arr2[j])
             j++
        }

        return result
}

var sortArray = function(nums) {

    if(nums.length <= 1) return nums
    var middle = Math.floor(nums.length/2)
    var left = sortArray(nums.slice(0,middle))
    var right = sortArray(nums.slice(middle))
    return merge(left,right)
}
