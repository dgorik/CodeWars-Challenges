/**
 * Counts the number of sign changes in the given array.
 * @param {number[]} arr - The input array.
 * @returns {number} The number of sign changes.
 */
function catchSignChange(arr) {
    // If the array is empty, return 0
    if (arr.length === 0) return 0;

    // Reduce the array to count sign changes
    return arr.reduce((acc, element, index) => {
        // Check if the sign of the current element is different from the sign of the next element
        return index < arr.length - 1 && sign(arr[index]) !== sign(arr[index + 1]) ? acc + 1 : acc;
    }, -1); // Start the accumulator at -1 to handle the edge case when the first element is 0

    // Function to determine the sign of an element
    function sign(element) {
        // Return 0 if the element is 0, otherwise return the sign of the element
        return element === 0 ? 0 : Math.sign(element);
    }
}

// Example usage
let x = catchSignChange([1, -3, -4, 0, 5]);
console.log(x); // Output: 2
